<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"
                xmlns:msxsl="urn:schemas-microsoft-com:xslt">

  <xsl:output method="text" />

  <xsl:include href="common.xslt" />
  
  <!-- Generates SQL script for adding partition functions and schemes -->

  <!-- Entry point -->
  <xsl:template match="/">

    <xsl:call-template name="sqlComment">
      <xsl:with-param name="commentText" select="'Autogenerated by partitions.xslt'" />
    </xsl:call-template>
    
    <!-- Process all functions -->
    <xsl:apply-templates select="//functions/function" />

  </xsl:template>

  <!-- Multi-value callback template -->
  <xsl:template match="valueCallback" mode="loopCallback">
    <xsl:param name="number" />
    <xsl:element name="value">
      <xsl:call-template name="replaceString">
        <xsl:with-param name="text" select="." />
        <xsl:with-param name="replace" select="'{{{value}}}'" />
        <xsl:with-param name="with" select="$number" />
      </xsl:call-template>
    </xsl:element>
  </xsl:template>
  
  <xsl:template match="function">
    
    <!-- Add the function -->
    <xsl:call-template name="sqlComment">
      <xsl:with-param name="commentText">
        <xsl:text>Function </xsl:text>
        <xsl:value-of select="@name"/>
      </xsl:with-param>
    </xsl:call-template>

    <xsl:text>CREATE PARTITION FUNCTION [</xsl:text>
    <xsl:value-of select="@name"/>
    <xsl:text>] (</xsl:text>
    <xsl:value-of select="@valuetype"/>
    <xsl:text>) AS RANGE </xsl:text>
    <xsl:value-of select="@type"/>
    <xsl:text> FOR VALUES (</xsl:text>

    <!-- Function values -->
    <xsl:variable name="functionValues">
      <xsl:for-each select="values/value">
        <!-- Check for multi-value -->
        <xsl:choose>
          <!-- 
          Both start and count attributes should be present and 
          they should be numbers 
        -->
          <xsl:when test="number(@start) and number(@count)">
            <xsl:call-template name="loopNumbers">
              <xsl:with-param name="start" select="@start" />
              <xsl:with-param name="end" select="number(@start+@count)-1" />
              <xsl:with-param name="callback" select="'valueCallback'" />
              <xsl:with-param name="context" select="." />
            </xsl:call-template>
          </xsl:when>
          <xsl:otherwise>
            <xsl:element name="value">
              <xsl:value-of select="."/>  
            </xsl:element>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:for-each>
    </xsl:variable>

    <xsl:variable name="functionValueNodes" select="msxsl:node-set($functionValues)/value" />

    <!-- Now render the function values -->
    <xsl:for-each select="$functionValueNodes">
      <xsl:if test="position()!=1" >
        <xsl:text>, </xsl:text>
      </xsl:if>
      <xsl:value-of select="." />
    </xsl:for-each>
    
    <xsl:text>);&#xa;GO&#xa;&#xa;</xsl:text>

    <!-- Capture the function name and value count -->
    <xsl:variable name="functionName" select="@name"/>
    <xsl:variable name="valueCount" select="number(count($functionValueNodes)+1)"/>

    <!-- Create all schemes for this function -->
    <xsl:for-each select="schemes/scheme">
      <xsl:text>CREATE PARTITION SCHEME [</xsl:text>
      <xsl:value-of select="@name"/>
      <xsl:text>] AS PARTITION [</xsl:text>
      <xsl:value-of select="$functionName"/>
      <xsl:text>] </xsl:text>
      
      <!-- 
        If we have filegroup on partition level, then direct all 
        boundary values to this filegroup; otherwise, process 
        individual boundaries
      -->

      <xsl:choose>
        <xsl:when test="@filegroup">
          <!-- ALL TO -->
          <xsl:text>ALL TO ([</xsl:text>
          <xsl:value-of select="@filegroup"/>
          <xsl:text>]);</xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:text>TO (</xsl:text>
          
          <!-- Capture the boundary values -->
          <xsl:variable name="schemeValues">
            <xsl:for-each select="boundary">
              <!-- Properly format the filegroup -->
              <xsl:variable name="fileGroupValue">
                <xsl:text>[</xsl:text>
                <xsl:value-of select="@filegroup"/>
                <xsl:text>]</xsl:text>
              </xsl:variable>
              <xsl:choose>
                <xsl:when test="number(@start) and number(@count)">
                  <xsl:call-template name="loopNumbers">
                    <xsl:with-param name="start" select="@start" />
                    <xsl:with-param name="end" select="number(@start+@count)-1" />
                    <xsl:with-param name="callback" select="'valueCallback'" />
                    <xsl:with-param name="context">
                      <xsl:element name="value">
                        <xsl:value-of select="$fileGroupValue"/>
                      </xsl:element>
                    </xsl:with-param>
                  </xsl:call-template>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:element name="value">
                    <xsl:value-of select="$fileGroupValue"/>
                  </xsl:element>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:for-each>
          </xsl:variable>

          <xsl:variable name="schemeValueNodes" select="msxsl:node-set($schemeValues)/value" />
          
          <!-- Check the number of boundary values -->
          <xsl:if test="count($schemeValueNodes)!=$valueCount">
            <xsl:message terminate="yes">Mismatched boundary values for partition scheme <xsl:value-of select="@name" /> </xsl:message>
          </xsl:if>
          
          <!-- Render the scheme filegroups -->
          <xsl:for-each select="$schemeValueNodes">
            <xsl:if test="position()!=1">
              <xsl:text>, </xsl:text>
            </xsl:if>
            <xsl:value-of select="." />
          </xsl:for-each>
          
          <xsl:text>)</xsl:text>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:text>&#xa;GO&#xa;&#xa;</xsl:text>
    </xsl:for-each>
    
  </xsl:template>

</xsl:stylesheet>  
